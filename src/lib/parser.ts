// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.0.2 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

'use strict';

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: 'literal';
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: 'class';
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: 'any';
}

export interface IEndExpectation {
  type: 'end';
}

export interface IOtherExpectation {
  type: 'other';
  description: string;
}

export type Expectation =
  | ILiteralExpectation
  | IClassExpectation
  | IAnyExpectation
  | IEndExpectation
  | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch));
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, (ch) => '\\x0' + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => '\\x' + hex(ch));
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case 'literal':
          return '"' + literalEscape(expectation.text) + '"';
        case 'class':
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) +
                  '-' +
                  classEscape(part[1] as string)
              : classEscape(part);
          });

          return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
        case 'any':
          return 'any character';
        case 'end':
          return 'end of input';
        case 'other':
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + ' or ' + descriptions[1];

        default:
          return (
            descriptions.slice(0, -1).join(', ') +
            ', or ' +
            descriptions[descriptions.length - 1]
          );
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? '"' + literalEscape(found1) + '"' : 'end of input';
    }

    return (
      'Expected ' +
      describeExpected(expected) +
      ' but ' +
      describeFound(found) +
      ' found.'
    );
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(
    message: string,
    expected: Expectation[],
    found: string | null,
    location: IFileRange,
  ) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof (Object as any).setPrototypeOf === 'function') {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === 'function') {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str +=
          '\n --> ' +
          loc +
          '\n' +
          filler +
          ' |\n' +
          s.line +
          ' | ' +
          line +
          '\n' +
          filler +
          ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: { [id: string]: any } = {
    object: peg$parseobject,
  };
  let peg$startRuleFunction: () => any = peg$parseobject;

  const peg$c0 = function (head: any, m: any): any {
    return m;
  };
  const peg$c1 = function (head: any, tail: any): any {
    var result: any = {};
    [head].concat(tail).forEach(function (element) {
      result[element.name] = element.value;
    });
    return result;
  };
  const peg$c2 = function (members: any): any {
    return members !== null ? members : {};
  };
  const peg$c3 = function (name: any, value: any): any {
    return { name: name, value: value };
  };
  const peg$c4 = '[';
  const peg$c5 = peg$literalExpectation('[', false);
  const peg$c6 = '{';
  const peg$c7 = peg$literalExpectation('{', false);
  const peg$c8 = ']';
  const peg$c9 = peg$literalExpectation(']', false);
  const peg$c10 = '}';
  const peg$c11 = peg$literalExpectation('}', false);
  const peg$c12 = ':';
  const peg$c13 = peg$literalExpectation(':', false);
  const peg$c14 = ',';
  const peg$c15 = peg$literalExpectation(',', false);
  const peg$c16 = /^[^\0:{}]/;
  const peg$c17 = peg$classExpectation(['\0', ':', '{', '}'], true, false);
  const peg$c18 = function (key: any): any {
    return key.join('');
  };
  const peg$c19 = /^[^\0':]/;
  const peg$c20 = peg$classExpectation(['\0', "'", ':'], true, false);
  const peg$c21 = /^[^\0":]/;
  const peg$c22 = peg$classExpectation(['\0', '"', ':'], true, false);
  const peg$c23 = 'false';
  const peg$c24 = peg$literalExpectation('false', false);
  const peg$c25 = function (): any {
    return false;
  };
  const peg$c26 = 'null';
  const peg$c27 = peg$literalExpectation('null', false);
  const peg$c28 = function (): any {
    return null;
  };
  const peg$c29 = 'true';
  const peg$c30 = peg$literalExpectation('true', false);
  const peg$c31 = function (): any {
    return true;
  };
  const peg$c32 = '"';
  const peg$c33 = peg$literalExpectation('"', false);
  const peg$c34 = "'";
  const peg$c35 = peg$literalExpectation("'", false);
  const peg$c36 = peg$otherExpectation('whitespace');
  const peg$c37 = /^[ \t\n\r]/;
  const peg$c38 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false);
  const peg$c39 = peg$otherExpectation('string');
  const peg$c40 = function (chars: any): any {
    return chars.join('');
  };
  const peg$c41 = peg$otherExpectation('single_quote_string');
  const peg$c42 = '\\';
  const peg$c43 = peg$literalExpectation('\\', false);
  const peg$c44 = '/';
  const peg$c45 = peg$literalExpectation('/', false);
  const peg$c46 = 'b';
  const peg$c47 = peg$literalExpectation('b', false);
  const peg$c48 = function (): any {
    return '\b';
  };
  const peg$c49 = 'f';
  const peg$c50 = peg$literalExpectation('f', false);
  const peg$c51 = function (): any {
    return '\f';
  };
  const peg$c52 = 'n';
  const peg$c53 = peg$literalExpectation('n', false);
  const peg$c54 = function (): any {
    return '\n';
  };
  const peg$c55 = 'r';
  const peg$c56 = peg$literalExpectation('r', false);
  const peg$c57 = function (): any {
    return '\r';
  };
  const peg$c58 = 't';
  const peg$c59 = peg$literalExpectation('t', false);
  const peg$c60 = function (): any {
    return '\t';
  };
  const peg$c61 = 'u';
  const peg$c62 = peg$literalExpectation('u', false);
  const peg$c63 = function (digits: any): any {
    return String.fromCharCode(parseInt(digits, 16));
  };
  const peg$c64 = function (sequence: any): any {
    return sequence;
  };
  const peg$c65 = /^[^\0-\x1F"'\\]/;
  const peg$c66 = peg$classExpectation(
    [['\0', '\x1F'], '"', "'", '\\'],
    true,
    false,
  );
  const peg$c67 = peg$otherExpectation('number');
  const peg$c68 = function (): any {
    return parseFloat(text());
  };
  const peg$c69 = '.';
  const peg$c70 = peg$literalExpectation('.', false);
  const peg$c71 = /^[1-9]/;
  const peg$c72 = peg$classExpectation([['1', '9']], false, false);
  const peg$c73 = /^[eE]/;
  const peg$c74 = peg$classExpectation(['e', 'E'], false, false);
  const peg$c75 = '-';
  const peg$c76 = peg$literalExpectation('-', false);
  const peg$c77 = '+';
  const peg$c78 = peg$literalExpectation('+', false);
  const peg$c79 = '0';
  const peg$c80 = peg$literalExpectation('0', false);
  const peg$c81 = /^[0-9]/;
  const peg$c82 = peg$classExpectation([['0', '9']], false, false);
  const peg$c83 = /^[0-9a-f]/i;
  const peg$c84 = peg$classExpectation(
    [
      ['0', '9'],
      ['a', 'f'],
    ],
    false,
    true,
  );
  const peg$c85 = function (head: any, v: any): any {
    return v;
  };
  const peg$c86 = function (head: any, tail: any): any {
    return [head].concat(tail);
  };
  const peg$c87 = function (values: any): any {
    return values !== null ? values : [];
  };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: { [id: number]: ICached } = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        'Can\'t start parsing from rule "' + options.startRule + '".',
      );
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1,
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(
    text1: string,
    ignoreCase: boolean,
  ): ILiteralExpectation {
    return { type: 'literal', text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(
    parts: IClassParts,
    inverted: boolean,
    ignoreCase: boolean,
  ): IClassExpectation {
    return {
      type: 'class',
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase,
    };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: 'any' };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: 'end' };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: 'other', description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], '', location1);
  }

  function peg$buildStructuredError(
    expected1: Expectation[],
    found: string | null,
    location1: IFileRange,
  ) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1,
    );
  }

  function peg$parseobject(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 38 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsebegin_object();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsemember();
      if ((s3 as any) !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if ((s6 as any) !== peg$FAILED) {
          s7 = peg$parsemember();
          if ((s7 as any) !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c0(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while ((s5 as any) !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if ((s6 as any) !== peg$FAILED) {
            s7 = peg$parsemember();
            if ((s7 as any) !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c0(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parsevalue_separator();
          if ((s5 as any) === peg$FAILED) {
            s5 = null;
          }
          if ((s5 as any) !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c1(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseend_object();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsemember(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parsename_separator();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseleaf_value();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebegin_array(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c5);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsebegin_object(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c7);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseend_array(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c9);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseend_object(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c10;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c11);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsename_separator(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c12;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c13);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevalue_separator(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c15);
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsekey(): any {
    let s0;

    const key = peg$currPos * 38 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsedouble_quote_key();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parsesingle_quote_key();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parsenaked_key();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenaked_key(): any {
    let s0, s1, s2;

    const key = peg$currPos * 38 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$c16.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c17);
      }
    }
    while ((s2 as any) !== peg$FAILED) {
      s1.push(s2);
      if (peg$c16.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c17);
        }
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c18(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesingle_quote_key(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsesingle_quote_mark();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      if (peg$c19.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c20);
        }
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c20);
          }
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsesingle_quote_mark();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedouble_quote_key(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      if (peg$c21.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        if (peg$c21.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c22);
          }
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefalse(): any {
    let s0, s1;

    const key = peg$currPos * 38 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c24);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c25();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenull(): any {
    let s0, s1;

    const key = peg$currPos * 38 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c27);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c28();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetrue(): any {
    let s0, s1;

    const key = peg$currPos * 38 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c30);
      }
    }
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c31();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseleaf_value(): any {
    let s0;

    const key = peg$currPos * 38 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsefalse();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parsenull();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parsetrue();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseobject();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parsearray();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parsenumber();
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parsesingle_quote_string();
                if ((s0 as any) === peg$FAILED) {
                  s0 = peg$parsestring();
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsequotation_mark(): any {
    let s0;

    const key = peg$currPos * 38 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c33);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesingle_quote_mark(): any {
    let s0;

    const key = peg$currPos * 38 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c35);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    const key = peg$currPos * 38 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = [];
    if (peg$c37.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c38);
      }
    }
    while ((s1 as any) !== peg$FAILED) {
      s0.push(s1);
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsestring(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequotation_mark();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsequotation_mark();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c39);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsesingle_quote_string(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesingle_quote_mark();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar();
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsesingle_quote_mark();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c41);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechar(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 38 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseunescaped();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if ((s1 as any) !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c32;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c33);
          }
        }
        if ((s2 as any) === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c42;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c43);
            }
          }
          if ((s2 as any) === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c44;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c45);
              }
            }
            if ((s2 as any) === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c46;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c47);
                }
              }
              if ((s3 as any) !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c48();
              }
              s2 = s3;
              if ((s2 as any) === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c49;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c50);
                  }
                }
                if ((s3 as any) !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c51();
                }
                s2 = s3;
                if ((s2 as any) === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c52;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c53);
                    }
                  }
                  if ((s3 as any) !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c54();
                  }
                  s2 = s3;
                  if ((s2 as any) === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c55;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c56);
                      }
                    }
                    if ((s3 as any) !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c57();
                    }
                    s2 = s3;
                    if ((s2 as any) === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c58;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c59);
                        }
                      }
                      if ((s3 as any) !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c60();
                      }
                      s2 = s3;
                      if ((s2 as any) === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 117) {
                          s3 = peg$c61;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c62);
                          }
                        }
                        if ((s3 as any) !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$currPos;
                          s6 = peg$parseHEXDIG();
                          if ((s6 as any) !== peg$FAILED) {
                            s7 = peg$parseHEXDIG();
                            if ((s7 as any) !== peg$FAILED) {
                              s8 = peg$parseHEXDIG();
                              if ((s8 as any) !== peg$FAILED) {
                                s9 = peg$parseHEXDIG();
                                if ((s9 as any) !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if ((s5 as any) !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if ((s4 as any) !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c63(s4);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if ((s2 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c64(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseescape(): any {
    let s0;

    const key = peg$currPos * 38 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c42;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c43);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseunescaped(): any {
    let s0;

    const key = peg$currPos * 38 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c65.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c66);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenumber(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 38 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseminus();
    if ((s1 as any) === peg$FAILED) {
      s1 = null;
    }
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseint();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parsefrac();
        if ((s3 as any) === peg$FAILED) {
          s3 = null;
        }
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseexp();
          if ((s4 as any) === peg$FAILED) {
            s4 = null;
          }
          if ((s4 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c68();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c67);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenumber_positive(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseint();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parsefrac();
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseexp();
        if ((s3 as any) === peg$FAILED) {
          s3 = null;
        }
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c68();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedecimal_point(): any {
    let s0;

    const key = peg$currPos * 38 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c69;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c70);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedigit1_9(): any {
    let s0;

    const key = peg$currPos * 38 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c71.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c72);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsee(): any {
    let s0;

    const key = peg$currPos * 38 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c73.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c74);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexp(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 38 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsee();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseminus();
      if ((s2 as any) === peg$FAILED) {
        s2 = peg$parseplus();
      }
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        if ((s4 as any) !== peg$FAILED) {
          while ((s4 as any) !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDIGIT();
          }
        } else {
          s3 = peg$FAILED;
        }
        if ((s3 as any) !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsefrac(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsedecimal_point();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if ((s3 as any) !== peg$FAILED) {
        while ((s3 as any) !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if ((s2 as any) !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseint(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 38 + 31;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsezero();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigit1_9();
      if ((s1 as any) !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        while ((s3 as any) !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
        if ((s2 as any) !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseminus(): any {
    let s0;

    const key = peg$currPos * 38 + 32;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c75;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c76);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseplus(): any {
    let s0;

    const key = peg$currPos * 38 + 33;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c77;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c78);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsezero(): any {
    let s0;

    const key = peg$currPos * 38 + 34;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c79;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c80);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDIGIT(): any {
    let s0;

    const key = peg$currPos * 38 + 35;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c81.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c82);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHEXDIG(): any {
    let s0;

    const key = peg$currPos * 38 + 36;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c83.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c84);
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsearray(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 38 + 37;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsebegin_array();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseleaf_value();
      if ((s3 as any) !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsevalue_separator();
        if ((s6 as any) !== peg$FAILED) {
          s7 = peg$parseleaf_value();
          if ((s7 as any) !== peg$FAILED) {
            peg$savedPos = s5;
            s6 = peg$c85(s3, s7);
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while ((s5 as any) !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if ((s6 as any) !== peg$FAILED) {
            s7 = peg$parseleaf_value();
            if ((s7 as any) !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c85(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parsevalue_separator();
          if ((s5 as any) === peg$FAILED) {
            s5 = null;
          }
          if ((s5 as any) !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c86(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if ((s2 as any) === peg$FAILED) {
        s2 = null;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseend_array();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c87(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
